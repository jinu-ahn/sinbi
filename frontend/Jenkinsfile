pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'siokim002'
        DOCKER_CREDENTIALS = 'docker-registry'
        GITOPS_REPO = 'https://gitlab.com/your-username/gitops-repo.git'
        GITOPS_CREDENTIALS = 'gitops_pk'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Determine Changes') {
            steps {
                script {
                    // Git 명령어를 사용하여 변경된 디렉토리 목록을 가져옵니다.
                    def changedDirs = sh(
                        script: "git diff --name-only HEAD~1 HEAD | awk -F'/' '{print \$1}' | sort | uniq",
                        returnStdout: true
                    ).trim().split('\n')

                    env.CHANGED_DIRS = changedDirs.join(',')

                    echo "Changed directories: ${env.CHANGED_DIRS}"
                }
            }
        }

        stage('Build and Deploy Frontend') {
            when {
                expression { return env.CHANGED_DIRS.contains('frontend') }
            }
            steps {
                dir('frontend') {
                    echo 'Building Frontend...'
                    sh 'npm install'
                    sh 'npm run build'

                    echo 'Building Docker Image...'
                    script {
                        def frontendImage = "${DOCKER_REGISTRY}/sinbi_frontend:${env.BUILD_NUMBER}"
                        docker.build(frontendImage).push()
                        env.FRONTEND_IMAGE = frontendImage
                    }
                }

                echo 'Updating GitOps Repository for Frontend...'
                script {
                    // GitOps 리포지토리를 클론합니다.
                    sh "git clone ${GITOPS_REPO} gitops"

                    dir('gitops') {
                        // frontend-deployment.yaml 파일 내 이미지 태그를 업데이트합니다.
                        sh """
                            yq e '.spec.template.spec.containers[0].image = "${env.FRONTEND_IMAGE}"' -i frontend-deployment.yaml
                        """

                        // Git 설정 및 커밋
                        sh 'git config user.email "ci-bot@your-domain.com"'
                        sh 'git config user.name "CI Bot"'
                        sh 'git add frontend-deployment.yaml'
                        sh "git commit -m 'Update frontend image to ${env.FRONTEND_IMAGE}'"

                        // GitOps 리포지토리에 푸시
                        withCredentials([usernamePassword(credentialsId: GITOPS_CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh "git push https://${USERNAME}:${PASSWORD}@gitlab.com/your-username/gitops-repo.git main"
                        }
                    }
                }
            }
        }

        stage('Build and Deploy User Service') {
            when {
                expression { return env.CHANGED_DIRS.contains('user') }
            }
            steps {
                dir('user') {
                    echo 'Building User Service...'
                    sh './mvnw clean package -DskipTests'

                    echo 'Building Docker Image...'
                    script {
                        def userImage = "${DOCKER_REGISTRY}/user:${env.BUILD_NUMBER}"
                        docker.build(userImage).push()
                        env.USER_IMAGE = userImage
                    }
                }

                echo 'Updating GitOps Repository for User Service...'
                script {
                    // GitOps 리포지토리를 클론합니다.
                    sh "git clone ${GITOPS_REPO} gitops"

                    dir('gitops') {
                        // user-deployment.yaml 파일 내 이미지 태그를 업데이트합니다.
                        sh """
                            yq e '.spec.template.spec.containers[0].image = "${env.USER_IMAGE}"' -i user-deployment.yaml
                        """

                        // Git 설정 및 커밋
                        sh 'git config user.email "ci-bot@your-domain.com"'
                        sh 'git config user.name "CI Bot"'
                        sh 'git add user-deployment.yaml'
                        sh "git commit -m 'Update user image to ${env.USER_IMAGE}'"

                        // GitOps 리포지토리에 푸시
                        withCredentials([usernamePassword(credentialsId: GITOPS_CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh "git push https://${USERNAME}:${PASSWORD}@gitlab.com/your-username/gitops-repo.git main"
                        }
                    }
                }
            }
        }

        // 유사한 단계들을 account, virtualAccount, filter 서비스에 대해 추가
        // 예: Build and Deploy Account Service, Build and Deploy VirtualAccount Service, etc.

    }

    post {
        always {
            cleanWs()
        }
    }
}
